this 키워드
- 객체는 상태를 나타내는 프로퍼티와 동작을 메서드 하나의 논리적인 단위로 묶은 복합 자료구조 입니다
- 동작을 나타내는 메서드는 자신이 속한 객체의 상태인 프로퍼티를 참조하고 변경할 수 있어야 한다
- 자신의 프로퍼티를 참조하려면 자신이 속한 객체를 가리키는 식별자를 참조할 수 있어야 한다
- 객체 리터럴 방식으로 생성한 객체의 경우 메서드 내부에서 메서드 자신이 속한 객체를 가리키는 식별자를 재귀적으로 참조할 수 있다

```
const circle = {
  // 프로퍼티: 객체 고유의 상태 데이터
  radius: 5,
  // 메서드: 상태 데이터를 참조하고 조작하는 동작
  getDiameter() {
    // 이 메서드가 자신이 속한 객체의 프로퍼티나 다른 메서드를 참조하려면
    // 자신이 속한 객체인 circle을 참조할 수 있어야 한다.
    return 2 * circle.radius;
  }
};

console.log(circle.getDiameter()); // 10

```

- getDiameter 메서드 내에서 메서드자신이 속한 객체를 가리키는 식별자 circle을 참조하고 있다
- 이 참조 표현식이 평가되는 시점은 getDiameter 메서드가 호출되어 함수 몸체가 실행되는 시점이다
- 객체 리터럴은 circle 변수에 할당되기 직전에 평가된다
- getDiameter 메서드가 호출되는 시점에는 이미 객체 리터럴의 평가가 완료되어 객체가 생성되었고 circle 식별자에 생성된 객체가 할당된 이후다 그래서 메서드 내부에서 circle 식별자를 참조할 수 있다
- 자기 자신이 속한 객체를 재귀적으로 참조하는 방식은 일반적이지 않고 바람직하지도 않다

```
function Circle(radius) {
  // 이 시점에는 생성자 함수 자신이 생성할 인스턴스를 가리키는 식별자를 알 수 없다.
  ????.radius = radius;
}

Circle.prototype.getDiameter = function () {
  // 이 시점에는 생성자 함수 자신이 생성할 인스턴스를 가리키는 식별자를 알 수 없다.
  return 2 * ????.radius;
};

// 생성자 함수로 인스턴스를 생성하려면 먼저 생성자 함수를 정의해야 한다.
const circle = new Circle(5);

```

- 생성자 함수 내부에서는 프로퍼티 또는 메서드를 추가하기 위해 자신이 생성할 인스턴스를 참조할 수 있어야 한다
- 하지만 생성자 함수에 의한 객체 생성 방식은 먼저 생성자 함수를 정의한 후 new 연산자와 함께 생성자 함수를 호출하는 단계가 추가로 필요하다
- 생성자 함수로 인스턴스를 생성하려면 생성자 함수가 존재해야 한다
- 생성자 함수를 정의하는 시점에서 아직 인스턴스를 생서앟기 이전이므로 생성자 함수가 생성할 인스턴스를 가리키는 식별자를 알 수 없다
- 따라서 자신이 속한 객체 또는 자신이 생성할 인스턴스를 가리키는 특수한 식별자가 필요하다
- 이를 this 라한다
- this는 자바스크립트엔진이 암묵적으로 생성하며 코드 어디서든 참조 할수 있다
- 함수를 호출하면 arguments 객체와 this가 암묵적으로 함수 내부에 전달된다
- 함수내부에서 arguments 객체를 지역 변수처럼 사용할 수 있는 것처럼 this도 지역 변수처럼 사용할 수 있다
- 하지만 this가 가리키는 값은 함수 호출방식에 의해 동적으로 결정된다

```
// 객체 리터럴
const circle = {
  radius: 5,
  getDiameter() {
    // this는 메서드를 호출한 객체를 가리킨다.
    return 2 * this.radius;
  }
};

console.log(circle.getDiameter()); // 10

```

- this는 메서드를 호출한 객체인 circle을 가리킨다

```
// 생성자 함수
function Circle(radius) {
  // this는 생성자 함수가 생성할 인스턴스를 가리킨다.
  this.radius = radius;
}

Circle.prototype.getDiameter = function () {
  // this는 생성자 함수가 생성할 인스턴스를 가리킨다.
  return 2 * this.radius;
};

// 인스턴스 생성
const circle = new Circle(5);
console.log(circle.getDiameter()); // 10

```

- 생성자 함수 내부의 this는 생성자 함수가 생성할 인스턴스를 가리킨다
- this는 상황에 따라 가리키는 대상이 다르다

```
// this는 어디서든지 참조 가능하다.
// 전역에서 this는 전역 객체 window를 가리킨다.
console.log(this); // window

function square(number) {
  // 일반 함수 내부에서 this는 전역 객체 window를 가리킨다.
  console.log(this); // window
  return number * number;
}
square(2);

const person = {
  name: 'Lee',
  getName() {
    // 메서드 내부에서 this는 메서드를 호출한 객체를 가리킨다.
    console.log(this); // {name: "Lee", getName: ƒ}
    return this.name;
  }
};
console.log(person.getName()); // Lee

function Person(name) {
  this.name = name;
  // 생성자 함수 내부에서 this는 생성자 함수가 생성할 인스턴스를 가리킨다.
  console.log(this); // Person {name: "Lee"}
}

const me = new Person('Lee');

```

- this는 객체의 프로퍼티나 메서드를 참조하기 위한 자기 참조 변수이므로 일반적으로 객체의 메서드 내부 또는 생성자 함수 내부에서만 의미가 있다
- strict moder가 적용된 일반 함수 내부의 this에는 undefined가 바인딩 된다
- 일반함수 내부에서 this를 사용할 필요가 없기 때문이다


# 함수 호출 방식과 this 바인딩
- this 바인딩은 함수 호출 방식, 함수가 어떻게 호출되었는지에 따라 동적으로 결정된다

```
// this 바인딩은 함수 호출 방식에 따라 동적으로 결정된다.
const foo = function () {
  console.dir(this);
};

// 동일한 함수도 다양한 방식으로 호출할 수 있다.

// 1. 일반 함수 호출
// foo 함수를 일반적인 방식으로 호출
// foo 함수 내부의 this는 전역 객체 window를 가리킨다.
foo(); // window

// 2. 메서드 호출
// foo 함수를 프로퍼티 값으로 할당하여 호출
// foo 함수 내부의 this는 메서드를 호출한 객체 obj를 가리킨다.
const obj = { foo };
obj.foo(); // obj

// 3. 생성자 함수 호출
// foo 함수를 new 연산자와 함께 생성자 함수로 호출
// foo 함수 내부의 this는 생성자 함수가 생성한 인스턴스를 가리킨다.
new foo(); // foo {}

// 4. Function.prototype.apply/call/bind 메서드에 의한 간접 호출
// foo 함수 내부의 this는 인수에 의해 결정된다.
const bar = { name: 'bar' };

foo.call(bar);   // bar
foo.apply(bar);  // bar
foo.bind(bar)(); // bar

```

## 일반 함수 호출

- this는 전역 객체가 기본 바인딩 된다

```
function foo() {
  console.log("foo's this: ", this);  // window
  function bar() {
    console.log("bar's this: ", this); // window
  }
  bar();
}
foo();

```

- 일반함수에서 this는 의미가 없다

```
function foo() {
  'use strict';

  console.log("foo's this: ", this);  // undefined
  function bar() {
    console.log("bar's this: ", this); // undefined
  }
  bar();
}
foo();

```

- strict mode 를 적용시키면 undefined가 발생

```
// var 키워드로 선언한 전역 변수 value는 전역 객체의 프로퍼티다.
var value = 1;
// const 키워드로 선언한 전역 변수 value는 전역 객체의 프로퍼티가 아니다.
// const value = 1;

const obj = {
  value: 100,
  foo() {
    console.log("foo's this: ", this);  // {value: 100, foo: ƒ}
    console.log("foo's this.value: ", this.value); // 100

    // 메서드 내에서 정의한 중첩 함수
    function bar() {
      console.log("bar's this: ", this); // window
      console.log("bar's this.value: ", this.value); // 1
    }

    // 메서드 내에서 정의한 중첩 함수도 일반 함수로 호출되면 중첩 함수 내부의 this에는 전역 객체가 바인딩된다.
    bar();
  }
};

obj.foo();

```

- 어떠한 함수라도 일반 함수로 호출이 되면 this에 전역 객첵 바인딩 된다

```
var value = 1;

const obj = {
  value: 100,
  foo() {
    console.log("foo's this: ", this); // {value: 100, foo: ƒ}
    // 콜백 함수 내부의 this에는 전역 객체가 바인딩된다.
    setTimeout(function () {
      console.log("callback's this: ", this); // window
      console.log("callback's this.value: ", this.value); // 1
    }, 100);
  }
};

obj.foo();

```

- 일반함수로 호출된 모든함수 내부의 this는 전역 객체가 바인딩 된다
- 외부함수인 메서드와 중첩함수 또는 콜백 함수의 this가 일치하지 않는다는 것은 중첩 함수 또는 콜백 함수를 헬퍼 함수로 동작하기 어렵게 만든다

```
var value = 1;

const obj = {
  value: 100,
  foo() {
    // this 바인딩(obj)을 변수 that에 할당한다.
    const that = this;

    // 콜백 함수 내부에서 this 대신 that을 참조한다.
    setTimeout(function () {
      console.log(that.value); // 100
    }, 100);
  }
};

obj.foo();

```

- 이방법 외에도 apply,call,bind를 제공한다

```
var value = 1;

const obj = {
  value: 100,
  foo() {
    // 콜백 함수에 명시적으로 this를 바인딩한다.
    setTimeout(function () {
      console.log(this.value); // 100
    }.bind(this), 100);
  }
};

obj.foo();

```

- 화살표 함수를 사용하는 방법도 있다

```
var value = 1;

const obj = {
  value: 100,
  foo() {
    // 화살표 함수 내부의 this는 상위 스코프의 this를 가리킨다.
    setTimeout(() => console.log(this.value), 100); // 100
  }
};

obj.foo();

```

## 메서드 호출

- 메서드내부의 this에는 메서드를 호출한 객체, 메서드를 호출할 때 메서드 이름앞의 마침표 연산자 앞에 기술한 객체가 바인딩 된다
- 주의할 점은 메서드 내부의 this는 메서드를 소유한 객체가 아닌 메서드를 호출한 객체에 바인딩 된다는 것

```
const person = {
  name: 'Lee',
  getName() {
    // 메서드 내부의 this는 메서드를 호출한 객체에 바인딩된다.
    return this.name;
  }
};

// 메서드 getName을 호출한 객체는 person이다.
console.log(person.getName()); // Lee

```

- getName 독립적으로 존재하는 별도의 객체이다
    
    ![https://s3-us-west-2.amazonaws.com/secure.notion-static.com/de646645-a46c-4c8f-a3b5-04d8d1a0dcec/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2022-03-15_%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE_10.48.14.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/de646645-a46c-4c8f-a3b5-04d8d1a0dcec/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2022-03-15_%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE_10.48.14.png)
    
- 그래서 getName 프로퍼티가 가리키는 함수 객체인 메서드는 다른 객체의 프로퍼티에 할당하는 것으로 다른 객체의 메서드가 될수도 있고 일반 변수에 할당하여 일반함수로 호출될 수도 있다

```
const anotherPerson = {
  name: 'Kim'
};
// getName 메서드를 anotherPerson 객체의 메서드로 할당
anotherPerson.getName = person.getName;

// getName 메서드를 호출한 객체는 anotherPerson이다.
console.log(anotherPerson.getName()); // Kim

// getName 메서드를 변수에 할당
const getName = person.getName;

// getName 메서드를 일반 함수로 호출
console.log(getName()); // ''
// 일반 함수로 호출된 getName 함수 내부의 this.name은 브라우저 환경에서 window.name과 같다.
// 브라우저 환경에서 window.name은 브라우저 창의 이름을 나타내는 빌트인 프로퍼티이며 기본값은 ''이다.
// Node.js 환경에서 this.name은 undefined다.

```

- 메서드 내부의 this는 프로퍼티로 메서드를 가리키고 있는 객체와는 관계가 없고 메서드를 호출한 객체에 바인딩 된다
    
    ![https://s3-us-west-2.amazonaws.com/secure.notion-static.com/ff85bc43-a1f0-467b-b0d9-5b976cbb71e1/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2022-03-15_%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE_10.53.10.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/ff85bc43-a1f0-467b-b0d9-5b976cbb71e1/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2022-03-15_%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE_10.53.10.png)
    
- 프로톹아비 메서드 내부에서 사용된 this도 일반 메서드와 마찬가지로 해당 메서드를 호출한 객체에 바인딩 된다

```
function Person(name) {
  this.name = name;
}

Person.prototype.getName = function () {
  return this.name;
};

const me = new Person('Lee');

// getName 메서드를 호출한 객체는 me다.
console.log(me.getName()); // ① Lee

Person.prototype.name = 'Kim';

// getName 메서드를 호출한 객체는 Person.prototype이다.
console.log(Person.prototype.getName()); // ② Kim

```

- 1의 경우 getName 메서드를 호출한 객체는 me 다 그래서 this는 me를 가리키며 this.name은 Lee다
- 2의 경우 getName 메서드를 호출한 객체는 Person.prototype이다
- Person.prototype도 객체이므로 직접 메서드를 호출할 수 있다 따라서 this.name은 kim이다
    
    ![https://s3-us-west-2.amazonaws.com/secure.notion-static.com/a23e7d78-9b36-46f9-8d7d-4593d280fc03/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2022-03-15_%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE_10.55.59.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/a23e7d78-9b36-46f9-8d7d-4593d280fc03/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2022-03-15_%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE_10.55.59.png)
    

## 생성자 함수 호출

- 미래에 생성할 인스턴스를 바인딩 한다

```
// 생성자 함수
function Circle(radius) {
  // 생성자 함수 내부의 this는 생성자 함수가 생성할 인스턴스를 가리킨다.
  this.radius = radius;
  this.getDiameter = function () {
    return 2 * this.radius;
  };
}

// 반지름이 5인 Circle 객체를 생성
const circle1 = new Circle(5);
// 반지름이 10인 Circle 객체를 생성
const circle2 = new Circle(10);

console.log(circle1.getDiameter()); // 10
console.log(circle2.getDiameter()); // 20

```

```
// new 연산자와 함께 호출하지 않으면 생성자 함수로 동작하지 않는다. 즉, 일반적인 함수의 호출이다.
const circle3 = Circle(15);

// 일반 함수로 호출된 Circle에는 반환문이 없으므로 암묵적으로 undefined를 반환한다.
console.log(circle3); // undefined

// 일반 함수로 호출된 Circle 내부의 this는 전역 객체를 가리킨다.
console.log(radius); // 15

```

## Function.prototype.apply/call/bind 메서드에 의한 간접 호출

![https://s3-us-west-2.amazonaws.com/secure.notion-static.com/a3fb6da6-22a9-4455-9070-e8d6f6f11366/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2022-03-15_%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE_10.58.43.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/a3fb6da6-22a9-4455-9070-e8d6f6f11366/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2022-03-15_%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE_10.58.43.png)

- apply,call,bind 메서드는 Function.prototype 의 메서드다 그러므로 모든 함수가 상속받아 사용할 수 있다

<aside> 💡 Function.prototype.apply(this로 사용할 객체[,함수에게 전달할 인수 리스트와 배열 또는 유사 배열 객체]) call(thisArg,[,arg1[,arg2[,...]]])

</aside>

```
function getThisBinding() {
  return this;
}

// this로 사용할 객체
const thisArg = { a: 1 };

console.log(getThisBinding()); // window

// getThisBinding 함수를 호출하면서 인수로 전달한 객체를 getThisBinding 함수의 this에 바인딩한다.
console.log(getThisBinding.apply(thisArg)); // {a: 1}
console.log(getThisBinding.call(thisArg)); // {a: 1}

```

- apply와 call 메서드의 본질적인 기능은 함수를 호출하는 것이다
- 첫번쨰 인수로 전달한 특정 객체를 호출한 함수의 this에 바인딩한다

```
function getThisBinding() {
  console.log(arguments);
  return this;
}

// this로 사용할 객체
const thisArg = { a: 1 };

// getThisBinding 함수를 호출하면서 인수로 전달한 객체를 getThisBinding 함수의 this에 바인딩한다.
// apply 메서드는 호출할 함수의 인수를 배열로 묶어 전달한다.
console.log(getThisBinding.apply(thisArg, [1, 2, 3]));
// Arguments(3) [1, 2, 3, callee: ƒ, Symbol(Symbol.iterator): ƒ]
// {a: 1}

// call 메서드는 호출할 함수의 인수를 쉼표로 구분한 리스트 형식으로 전달한다.
console.log(getThisBinding.call(thisArg, 1, 2, 3));
// Arguments(3) [1, 2, 3, callee: ƒ, Symbol(Symbol.iterator): ƒ]
// {a: 1}

```

- apply 메서드는 인수를 배열로 받고
- call 메서드는 함수의 인수를 쉼표로 구분하여 받는다
- 대표적인 예로는 arguments 객체는 배열이 아니라서 slice를 사용하지 못하지만 apply나 call을 이용하면 가능하다

```
function convertArgsToArray() {
  console.log(arguments);

  // arguments 객체를 배열로 변환
  // Array.prototype.slice를 인수없이 호출하면 배열의 복사본을 생성한다.
  const arr = Array.prototype.slice.call(arguments);
  // const arr = Array.prototype.slice.apply(arguments);
  console.log(arr);

  return arr;
}

convertArgsToArray(1, 2, 3); // [1, 2, 3]

```

- Function.prototype.bind 메서드는 apply와 call 메서드와 달리 함수를 호출하지 않고 this로 사용할 객체만 전달한다

```
function getThisBinding() {
  return this;
}

// this로 사용할 객체
const thisArg = { a: 1 };

// bind 메서드는 첫 번째 인수로 전달한 thisArg로 this 바인딩이 교체된
// getThisBinding 함수를 새롭게 생성해 반환한다.
console.log(getThisBinding.bind(thisArg)); // getThisBinding
// bind 메서드는 함수를 호출하지는 않으므로 명시적으로 호출해야 한다.
console.log(getThisBinding.bind(thisArg)()); // {a: 1}

```

```
const person = {
  name: 'Lee',
  foo(callback) {
    // ①
    setTimeout(callback, 100);
  }
};

person.foo(function () {
  console.log(`Hi! my name is ${this.name}.`); // ② Hi! my name is .
  // 일반 함수로 호출된 콜백 함수 내부의 this.name은 브라우저 환경에서 window.name과 같다.
  // 브라우저 환경에서 window.name은 브라우저 창의 이름을 나타내는 빌트인 프로퍼티이며 기본값은 ''이다.
  // Node.js 환경에서 this.name은 undefined다.
});

```

- 1번시점에서 this는 foo를 호출한 객체인 person
- 2번 시점에서는 this는 window를 가리킨다
- 따라서 this의 일치가 필요하다

```
const person = {
  name: 'Lee',
  foo(callback) {
    // bind 메서드로 callback 함수 내부의 this 바인딩을 전달
    setTimeout(callback.bind(this), 100);
  }
};

person.foo(function () {
  console.log(`Hi! my name is ${this.name}.`); // Hi! my name is Lee.
});

```

![https://s3-us-west-2.amazonaws.com/secure.notion-static.com/0444a03a-a1e6-4a18-a3d7-952d8b483f58/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2022-03-15_%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE_11.15.21.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/0444a03a-a1e6-4a18-a3d7-952d8b483f58/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2022-03-15_%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE_11.15.21.png)

알게된것

함수 내부의 함수는 this가 전역객체를 가리킨다는것

왜 클래스에서 bind를 적극 활용했는지
